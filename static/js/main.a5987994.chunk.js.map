{"version":3,"sources":["useApi.tsx","PeopleSwiper.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["overrideHost","URLSearchParams","window","location","search","get","host","shuffleArray","array","i","length","j","Math","floor","random","PersonItem","props","Box","position","width","maxWidth","height","boxShadow","borderRadius","style","background","imgsrc","backgroundColor","backgroundSize","backgroundPosition","display","flexDirection","p","borderBottomLeftRadius","borderBottomRightRadius","fontSize","textAlign","name","party","PeopleSwiper","people","onSelect","React","useState","counter","setCounter","paddingTop","flex","WebkitUserSelect","slice","reverse","map","person","key","id","left","transform","preventSwipe","onSwipe","direction","onCardLeftScreen","x","Table","marginTop","alignItems","y","n","Boolean","hostname","match","ReactDOM","render","isLoading","setLoading","isError","setError","undefined","setPeople","useEffect","a","fetch","response","json","load","useMemo","usePeople","voteYes","voteNo","voted","setVoted","yes","then","updated","list","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5987994.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Person = {\n  id: string;\n  name: string;\n  imgsrc?: string;\n  party?: string;\n  y: number;\n  n: number;\n};\n\nconst overrideHost = new URLSearchParams(window.location.search).get('host');\n\nconst host = overrideHost !== null ? overrideHost : \"http://34.67.21.85:8000\";\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport const usePeople = () => {\n  const [isLoading, setLoading] = React.useState<boolean>(false);\n  const [isError, setError] = React.useState<boolean>(false);\n  const [people, setPeople] = React.useState<Person[] | undefined>(undefined);\n\n  React.useEffect(() => {\n    const load = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(host + \"/api/v1/lj/\");\n        setPeople(shuffleArray((await response.json()) as Person[]));\n        setLoading(false);\n      } catch (e) {\n        setError(true);\n      }\n    };\n    load();\n  }, []);\n\n  return React.useMemo(\n    () => ({\n      people,\n      isLoading,\n      isError,\n    }),\n    [people, isLoading, isError]\n  );\n};\n\nexport const useVote = () => {\n    return {\n      voteYes: async (id: string): Promise<Person> => await (await fetch(host + \"/api/v1/lj/vote_y/\" + id)).json(),\n      voteNo: async (id: string): Promise<Person> => await (await fetch(host + \"/api/v1/lj/vote_n/\" + id)).json(),\n    }\n};","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport TinderCard from \"react-tinder-card\";\nimport { Person } from \"./useApi\";\n\nconst PersonItem = (props: Person) => (\n  <Box\n    position=\"relative\"\n    width=\"80vw\"\n    maxWidth=\"260px\"\n    height=\"300px\"\n    boxShadow=\"0px 0px 60px 0px rgba(0,0,0,0.30)\"\n    borderRadius={20}\n    style={{\n      background: `url(${props.imgsrc})`,\n      backgroundColor: \"white\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\",\n    }}\n    display=\"flex\"\n    flexDirection=\"column-reverse\"\n  >\n    <Box\n      p=\"10px\"\n      style={{\n        background: \"white\",\n        borderBottomLeftRadius: 20,\n        borderBottomRightRadius: 20,\n      }}\n    >\n      <Box style={{ fontSize: \"2em\", textAlign: \"right\" }}>{props.name}</Box>\n      <Box style={{ fontSize: \"1em\", textAlign: \"right\" }}>{props.party}</Box>\n    </Box>\n  </Box>\n);\n\ntype PeopleSwiperProps = {\n  people: Person[];\n  onSelect: (person: Person, b: boolean) => void;\n};\n\nexport const PeopleSwiper = ({ people, onSelect }: PeopleSwiperProps) => {\n  const [counter, setCounter] = React.useState(0);\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" paddingTop=\"50px\">\n      <Box\n        flex={1}\n        paddingTop=\"70px\"\n        style={{\n          WebkitUserSelect: \"none\",\n          fontSize: \"100px\",\n          textAlign: \"right\",\n        }}\n      >\n        âœ¨\n      </Box>\n      <Box flex={3}>\n        {people &&\n          people\n            .slice(counter, counter + 2)\n            .reverse()\n            .map((person) => (\n              <Box\n                key={person.id}\n                position=\"absolute\"\n                left=\"50%\"\n                style={{\n                  WebkitUserSelect: \"none\",\n                  transform: \"translateX(-50%)\",\n                }}\n              >\n                <TinderCard\n                  key={person.id}\n                  preventSwipe={[\"up\", \"down\"]}\n                  onSwipe={(direction) =>\n                    onSelect(person, direction === \"right\")\n                  }\n                  onCardLeftScreen={() => {\n                    setCounter((x) => x + 1);\n                  }}\n                >\n                  <PersonItem {...person} />\n                </TinderCard>\n              </Box>\n            ))}\n      </Box>\n      <Box\n        flex={1}\n        paddingTop=\"70px\"\n        style={{\n          WebkitUserSelect: \"none\",\n          fontSize: \"100px\",\n          textAlign: \"left\",\n        }}\n      >\n        ðŸ¦Ž\n      </Box>\n    </Box>\n  );\n};\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { Person, usePeople, useVote } from './useApi';\nimport { PeopleSwiper } from './PeopleSwiper';\n\nconst Table = ({ people } : {people: Person[]}) => <Box marginTop=\"250px\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n{people.map(person => (<Box  key={person.id} display=\"flex\" flexDirection=\"row\" marginTop=\"5px\">\n  <Box>{person.y} = ðŸ¦Ž</Box>\n  <Box width=\"20px\"/>\n  <Box>{person.n} = âœ¨</Box>\n  <Box width=\"20px\"/>\n  <Box>{person.name}</Box>\n</Box>))}\n</Box>\n\nexport const App = () => {\n  const { people, isError, isLoading } = usePeople();\n  // todo filter who you already voted for\n  const { voteYes, voteNo } = useVote();\n  const [voted, setVoted] = React.useState<Person[]>([]);\n\n  const onVote = (person: Person, yes: boolean) => {\n    (yes ? voteYes : voteNo)(person.id).then((updated: Person) => {\n      setVoted(list => list.map((person: Person) => person.id === updated.id ? updated : person));\n    });\n    setVoted(x => [{\n      ...person,\n      y: person.y + (yes ? 1 : 0),\n      n: person.n + (!yes ? 1 : 0)\n    }, ...x]);\n    // todo write to local host\n  }\n\n  return (\n    <Box position=\"relative\" width=\"100%\" height=\"100%\" p=\"10px\">\n      {isLoading && <Box>Loading</Box>}\n      {isError && <Box>error</Box>}\n      {people && <PeopleSwiper people={people} onSelect={onVote}/>}\n      <Table people={voted} />\n    </Box>\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}